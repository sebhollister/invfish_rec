# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

import _model

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _model.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _model.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _model.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _model.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _model.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _model.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _model.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _model.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _model.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _model.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _model.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _model.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _model.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _model:
_model.SwigPyIterator_swigregister(SwigPyIterator)


import numpy as np

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(DoubleVector self) -> SwigPyIterator"""
        return _model.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(DoubleVector self) -> bool"""
        return _model.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(DoubleVector self) -> bool"""
        return _model.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        r"""__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _model.DoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        r"""
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _model.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _model.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        r"""
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _model.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        r"""
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _model.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        r"""pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _model.DoubleVector_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        r"""
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(DoubleVector self) -> bool"""
        return _model.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        r"""size(DoubleVector self) -> std::vector< double >::size_type"""
        return _model.DoubleVector_size(self)

    def swap(self, v: 'DoubleVector') -> "void":
        r"""
        swap(DoubleVector self, DoubleVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _model.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        r"""begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _model.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        r"""end(DoubleVector self) -> std::vector< double >::iterator"""
        return _model.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        r"""rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _model.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        r"""rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _model.DoubleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(DoubleVector self)"""
        return _model.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        r"""get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _model.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(DoubleVector self)"""
        return _model.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        r"""
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _model.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVector self) -> DoubleVector
        __init__(DoubleVector self, DoubleVector other) -> DoubleVector

        Parameters
        ----------
        other: std::vector< double > const &

        __init__(DoubleVector self, std::vector< double >::size_type size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(DoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _model.DoubleVector_swiginit(self, _model.new_DoubleVector(*args))

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        r"""
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        r"""front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _model.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        r"""back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _model.DoubleVector_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        r"""
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _model.DoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        r"""
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _model.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        r"""capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _model.DoubleVector_capacity(self)

    def __array__(self):
        """Enable access to this data as a numpy array, via np.asarray(v) """
        type_name = "double"
        s = len(self)
        if type_name == "float":
            a = np.ndarray(shape=(s,), dtype=np.float32)
        elif type_name == "double":
            a = np.ndarray(shape=(s,), dtype=np.float64)
        elif type_name == "int":
            a = np.ndarray(shape=(s,), dtype=np.int32)
        elif type_name == "int64" or type_name == "int64_t":
            a = np.ndarray(shape=(s,), dtype=np.int64)
        elif type_name == "bool":
            a = np.ndarray(shape=(s,), dtype=np.bool)
        else:
            raise Exception("Expecting float or double type")
        copy_to_buffer_double(self, a)
        return a

    def copy_from(self, a):
        """Enable buffer copy from given numpy array or vector """
        if isinstance(a, FloatVector):
            copy_from_vector_float_to_double(self, a)
        elif isinstance(a, DoubleVector):
            copy_from_vector_double_to_double(self, a)
        elif isinstance(a, IntVector):
            copy_from_vector_int_to_double(self, a)
        elif isinstance(a, Int64Vector):
            copy_from_vector_int64_to_double(self, a)
        elif isinstance(a, Int8Vector):
            copy_from_vector_int8_to_double(self, a)
        else:
            copy_from_buffer_double(self, a)

    __swig_destroy__ = _model.delete_DoubleVector

# Register DoubleVector in _model:
_model.DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(DoubleVectorVector self) -> SwigPyIterator"""
        return _model.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(DoubleVectorVector self) -> bool"""
        return _model.DoubleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(DoubleVectorVector self) -> bool"""
        return _model.DoubleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        r"""__len__(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type"""
        return _model.DoubleVectorVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        r"""
        __getslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> DoubleVectorVector

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _model.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        __setslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, DoubleVectorVector v)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        """
        return _model.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "void":
        r"""
        __delslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _model.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        __delitem__(DoubleVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        r"""
        __getitem__(DoubleVectorVector self, PySliceObject * slice) -> DoubleVectorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i) -> DoubleVector

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        """
        return _model.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(DoubleVectorVector self, PySliceObject * slice, DoubleVectorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        __setitem__(DoubleVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, DoubleVector x)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        r"""pop(DoubleVectorVector self) -> DoubleVector"""
        return _model.DoubleVectorVector_pop(self)

    def append(self, x: 'DoubleVector') -> "void":
        r"""
        append(DoubleVectorVector self, DoubleVector x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(DoubleVectorVector self) -> bool"""
        return _model.DoubleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        r"""size(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type"""
        return _model.DoubleVectorVector_size(self)

    def swap(self, v: 'DoubleVectorVector') -> "void":
        r"""
        swap(DoubleVectorVector self, DoubleVectorVector v)

        Parameters
        ----------
        v: std::vector< std::vector< double,std::allocator< double > > > &

        """
        return _model.DoubleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        r"""begin(DoubleVectorVector self) -> std::vector< std::vector< double > >::iterator"""
        return _model.DoubleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        r"""end(DoubleVectorVector self) -> std::vector< std::vector< double > >::iterator"""
        return _model.DoubleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        r"""rbegin(DoubleVectorVector self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _model.DoubleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        r"""rend(DoubleVectorVector self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _model.DoubleVectorVector_rend(self)

    def clear(self) -> "void":
        r"""clear(DoubleVectorVector self)"""
        return _model.DoubleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        r"""get_allocator(DoubleVectorVector self) -> std::vector< std::vector< double > >::allocator_type"""
        return _model.DoubleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(DoubleVectorVector self)"""
        return _model.DoubleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        r"""
        erase(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator

        erase(DoubleVectorVector self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< double > >::iterator
        last: std::vector< std::vector< double > >::iterator

        """
        return _model.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVectorVector self) -> DoubleVectorVector
        __init__(DoubleVectorVector self, DoubleVectorVector other) -> DoubleVectorVector

        Parameters
        ----------
        other: std::vector< std::vector< double,std::allocator< double > > > const &

        __init__(DoubleVectorVector self, std::vector< std::vector< double > >::size_type size) -> DoubleVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type

        __init__(DoubleVectorVector self, std::vector< std::vector< double > >::size_type size, DoubleVector value) -> DoubleVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type
        value: std::vector< std::vector< double > >::value_type const &

        """
        _model.DoubleVectorVector_swiginit(self, _model.new_DoubleVectorVector(*args))

    def push_back(self, x: 'DoubleVector') -> "void":
        r"""
        push_back(DoubleVectorVector self, DoubleVector x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        r"""front(DoubleVectorVector self) -> DoubleVector"""
        return _model.DoubleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        r"""back(DoubleVectorVector self) -> DoubleVector"""
        return _model.DoubleVectorVector_back(self)

    def assign(self, n: 'std::vector< std::vector< double > >::size_type', x: 'DoubleVector') -> "void":
        r"""
        assign(DoubleVectorVector self, std::vector< std::vector< double > >::size_type n, DoubleVector x)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(DoubleVectorVector self, std::vector< std::vector< double > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type

        resize(DoubleVectorVector self, std::vector< std::vector< double > >::size_type new_size, DoubleVector x)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos, DoubleVector x) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        x: std::vector< std::vector< double > >::value_type const &

        insert(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, DoubleVector x)

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _model.DoubleVectorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::vector< double > >::size_type') -> "void":
        r"""
        reserve(DoubleVectorVector self, std::vector< std::vector< double > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type

        """
        return _model.DoubleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        r"""capacity(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type"""
        return _model.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _model.delete_DoubleVectorVector

# Register DoubleVectorVector in _model:
_model.DoubleVectorVector_swigregister(DoubleVectorVector)

class FloatVector(object):
    r"""Proxy of C++ std::vector< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(FloatVector self) -> SwigPyIterator"""
        return _model.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(FloatVector self) -> bool"""
        return _model.FloatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(FloatVector self) -> bool"""
        return _model.FloatVector___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        r"""__len__(FloatVector self) -> std::vector< float >::size_type"""
        return _model.FloatVector___len__(self)

    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        r"""
        __getslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> FloatVector

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _model.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, FloatVector v)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type
        v: std::vector< float,std::allocator< float > > const &

        """
        return _model.FloatVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        r"""
        __delslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _model.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(FloatVector self, std::vector< float >::difference_type i)

        Parameters
        ----------
        i: std::vector< float >::difference_type

        __delitem__(FloatVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        r"""
        __getitem__(FloatVector self, PySliceObject * slice) -> FloatVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(FloatVector self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &

        Parameters
        ----------
        i: std::vector< float >::difference_type

        """
        return _model.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(FloatVector self, PySliceObject * slice, FloatVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< float,std::allocator< float > > const &

        __setitem__(FloatVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        r"""pop(FloatVector self) -> std::vector< float >::value_type"""
        return _model.FloatVector_pop(self)

    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        r"""
        append(FloatVector self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(FloatVector self) -> bool"""
        return _model.FloatVector_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        r"""size(FloatVector self) -> std::vector< float >::size_type"""
        return _model.FloatVector_size(self)

    def swap(self, v: 'FloatVector') -> "void":
        r"""
        swap(FloatVector self, FloatVector v)

        Parameters
        ----------
        v: std::vector< float > &

        """
        return _model.FloatVector_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        r"""begin(FloatVector self) -> std::vector< float >::iterator"""
        return _model.FloatVector_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        r"""end(FloatVector self) -> std::vector< float >::iterator"""
        return _model.FloatVector_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        r"""rbegin(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _model.FloatVector_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        r"""rend(FloatVector self) -> std::vector< float >::reverse_iterator"""
        return _model.FloatVector_rend(self)

    def clear(self) -> "void":
        r"""clear(FloatVector self)"""
        return _model.FloatVector_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        r"""get_allocator(FloatVector self) -> std::vector< float >::allocator_type"""
        return _model.FloatVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(FloatVector self)"""
        return _model.FloatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        r"""
        erase(FloatVector self, std::vector< float >::iterator pos) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator

        erase(FloatVector self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator

        Parameters
        ----------
        first: std::vector< float >::iterator
        last: std::vector< float >::iterator

        """
        return _model.FloatVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatVector self) -> FloatVector
        __init__(FloatVector self, FloatVector other) -> FloatVector

        Parameters
        ----------
        other: std::vector< float > const &

        __init__(FloatVector self, std::vector< float >::size_type size) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type

        __init__(FloatVector self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type
        value: std::vector< float >::value_type const &

        """
        _model.FloatVector_swiginit(self, _model.new_FloatVector(*args))

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        r"""
        push_back(FloatVector self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        r"""front(FloatVector self) -> std::vector< float >::value_type const &"""
        return _model.FloatVector_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        r"""back(FloatVector self) -> std::vector< float >::value_type const &"""
        return _model.FloatVector_back(self)

    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        r"""
        assign(FloatVector self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(FloatVector self, std::vector< float >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< float >::size_type

        resize(FloatVector self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator
        x: std::vector< float >::value_type const &

        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< float >::iterator
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _model.FloatVector_insert(self, *args)

    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        r"""
        reserve(FloatVector self, std::vector< float >::size_type n)

        Parameters
        ----------
        n: std::vector< float >::size_type

        """
        return _model.FloatVector_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        r"""capacity(FloatVector self) -> std::vector< float >::size_type"""
        return _model.FloatVector_capacity(self)

    def __array__(self):
        """Enable access to this data as a numpy array, via np.asarray(v) """
        type_name = "float"
        s = len(self)
        if type_name == "float":
            a = np.ndarray(shape=(s,), dtype=np.float32)
        elif type_name == "double":
            a = np.ndarray(shape=(s,), dtype=np.float64)
        elif type_name == "int":
            a = np.ndarray(shape=(s,), dtype=np.int32)
        elif type_name == "int64" or type_name == "int64_t":
            a = np.ndarray(shape=(s,), dtype=np.int64)
        elif type_name == "bool":
            a = np.ndarray(shape=(s,), dtype=np.bool)
        else:
            raise Exception("Expecting float or double type")
        copy_to_buffer_float(self, a)
        return a

    def copy_from(self, a):
        """Enable buffer copy from given numpy array or vector """
        if isinstance(a, FloatVector):
            copy_from_vector_float_to_float(self, a)
        elif isinstance(a, DoubleVector):
            copy_from_vector_double_to_float(self, a)
        elif isinstance(a, IntVector):
            copy_from_vector_int_to_float(self, a)
        elif isinstance(a, Int64Vector):
            copy_from_vector_int64_to_float(self, a)
        elif isinstance(a, Int8Vector):
            copy_from_vector_int8_to_float(self, a)
        else:
            copy_from_buffer_float(self, a)

    __swig_destroy__ = _model.delete_FloatVector

# Register FloatVector in _model:
_model.FloatVector_swigregister(FloatVector)

class FloatVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< float > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(FloatVectorVector self) -> SwigPyIterator"""
        return _model.FloatVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(FloatVectorVector self) -> bool"""
        return _model.FloatVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(FloatVectorVector self) -> bool"""
        return _model.FloatVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        r"""__len__(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type"""
        return _model.FloatVectorVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::vector< float > >::difference_type', j: 'std::vector< std::vector< float > >::difference_type') -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        r"""
        __getslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j) -> FloatVectorVector

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        """
        return _model.FloatVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        __setslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j, FloatVectorVector v)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type
        v: std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &

        """
        return _model.FloatVectorVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::vector< float > >::difference_type', j: 'std::vector< std::vector< float > >::difference_type') -> "void":
        r"""
        __delslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        """
        return _model.FloatVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type

        __delitem__(FloatVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.FloatVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        r"""
        __getitem__(FloatVectorVector self, PySliceObject * slice) -> FloatVectorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i) -> FloatVector

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type

        """
        return _model.FloatVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(FloatVectorVector self, PySliceObject * slice, FloatVectorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &

        __setitem__(FloatVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, FloatVector x)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        r"""pop(FloatVectorVector self) -> FloatVector"""
        return _model.FloatVectorVector_pop(self)

    def append(self, x: 'FloatVector') -> "void":
        r"""
        append(FloatVectorVector self, FloatVector x)

        Parameters
        ----------
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(FloatVectorVector self) -> bool"""
        return _model.FloatVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< float > >::size_type":
        r"""size(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type"""
        return _model.FloatVectorVector_size(self)

    def swap(self, v: 'FloatVectorVector') -> "void":
        r"""
        swap(FloatVectorVector self, FloatVectorVector v)

        Parameters
        ----------
        v: std::vector< std::vector< float,std::allocator< float > > > &

        """
        return _model.FloatVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        r"""begin(FloatVectorVector self) -> std::vector< std::vector< float > >::iterator"""
        return _model.FloatVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< float > >::iterator":
        r"""end(FloatVectorVector self) -> std::vector< std::vector< float > >::iterator"""
        return _model.FloatVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        r"""rbegin(FloatVectorVector self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _model.FloatVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        r"""rend(FloatVectorVector self) -> std::vector< std::vector< float > >::reverse_iterator"""
        return _model.FloatVectorVector_rend(self)

    def clear(self) -> "void":
        r"""clear(FloatVectorVector self)"""
        return _model.FloatVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        r"""get_allocator(FloatVectorVector self) -> std::vector< std::vector< float > >::allocator_type"""
        return _model.FloatVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(FloatVectorVector self)"""
        return _model.FloatVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        r"""
        erase(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator

        erase(FloatVectorVector self, std::vector< std::vector< float > >::iterator first, std::vector< std::vector< float > >::iterator last) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< float > >::iterator
        last: std::vector< std::vector< float > >::iterator

        """
        return _model.FloatVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FloatVectorVector self) -> FloatVectorVector
        __init__(FloatVectorVector self, FloatVectorVector other) -> FloatVectorVector

        Parameters
        ----------
        other: std::vector< std::vector< float,std::allocator< float > > > const &

        __init__(FloatVectorVector self, std::vector< std::vector< float > >::size_type size) -> FloatVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< float > >::size_type

        __init__(FloatVectorVector self, std::vector< std::vector< float > >::size_type size, FloatVector value) -> FloatVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< float > >::size_type
        value: std::vector< std::vector< float > >::value_type const &

        """
        _model.FloatVectorVector_swiginit(self, _model.new_FloatVectorVector(*args))

    def push_back(self, x: 'FloatVector') -> "void":
        r"""
        push_back(FloatVectorVector self, FloatVector x)

        Parameters
        ----------
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        r"""front(FloatVectorVector self) -> FloatVector"""
        return _model.FloatVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        r"""back(FloatVectorVector self) -> FloatVector"""
        return _model.FloatVectorVector_back(self)

    def assign(self, n: 'std::vector< std::vector< float > >::size_type', x: 'FloatVector') -> "void":
        r"""
        assign(FloatVectorVector self, std::vector< std::vector< float > >::size_type n, FloatVector x)

        Parameters
        ----------
        n: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(FloatVectorVector self, std::vector< std::vector< float > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< float > >::size_type

        resize(FloatVectorVector self, std::vector< std::vector< float > >::size_type new_size, FloatVector x)

        Parameters
        ----------
        new_size: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos, FloatVector x) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator
        x: std::vector< std::vector< float > >::value_type const &

        insert(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos, std::vector< std::vector< float > >::size_type n, FloatVector x)

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator
        n: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _model.FloatVectorVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::vector< float > >::size_type') -> "void":
        r"""
        reserve(FloatVectorVector self, std::vector< std::vector< float > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< float > >::size_type

        """
        return _model.FloatVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        r"""capacity(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type"""
        return _model.FloatVectorVector_capacity(self)
    __swig_destroy__ = _model.delete_FloatVectorVector

# Register FloatVectorVector in _model:
_model.FloatVectorVector_swigregister(FloatVectorVector)

class StringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(StringVector self) -> SwigPyIterator"""
        return _model.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(StringVector self) -> bool"""
        return _model.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(StringVector self) -> bool"""
        return _model.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        r"""__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _model.StringVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        r"""
        __getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _model.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _model.StringVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        r"""
        __delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _model.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        r"""
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _model.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        r"""pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _model.StringVector_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        r"""
        append(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(StringVector self) -> bool"""
        return _model.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        r"""size(StringVector self) -> std::vector< std::string >::size_type"""
        return _model.StringVector_size(self)

    def swap(self, v: 'StringVector') -> "void":
        r"""
        swap(StringVector self, StringVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _model.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        r"""begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _model.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        r"""end(StringVector self) -> std::vector< std::string >::iterator"""
        return _model.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _model.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _model.StringVector_rend(self)

    def clear(self) -> "void":
        r"""clear(StringVector self)"""
        return _model.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        r"""get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _model.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(StringVector self)"""
        return _model.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        r"""
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _model.StringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringVector self) -> StringVector
        __init__(StringVector self, StringVector other) -> StringVector

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(StringVector self, std::vector< std::string >::size_type size) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(StringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _model.StringVector_swiginit(self, _model.new_StringVector(*args))

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        r"""
        push_back(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        r"""front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _model.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        r"""back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _model.StringVector_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        r"""
        assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(StringVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _model.StringVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        r"""
        reserve(StringVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _model.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        r"""capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _model.StringVector_capacity(self)
    __swig_destroy__ = _model.delete_StringVector

# Register StringVector in _model:
_model.StringVector_swigregister(StringVector)

class IntVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _model.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(IntVector self) -> bool"""
        return _model.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(IntVector self) -> bool"""
        return _model.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        r"""__len__(IntVector self) -> std::vector< int >::size_type"""
        return _model.IntVector___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        r"""
        __getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _model.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _model.IntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        r"""
        __delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _model.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(IntVector self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        r"""
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _model.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(IntVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        r"""pop(IntVector self) -> std::vector< int >::value_type"""
        return _model.IntVector_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        r"""
        append(IntVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(IntVector self) -> bool"""
        return _model.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        r"""size(IntVector self) -> std::vector< int >::size_type"""
        return _model.IntVector_size(self)

    def swap(self, v: 'IntVector') -> "void":
        r"""
        swap(IntVector self, IntVector v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _model.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        r"""begin(IntVector self) -> std::vector< int >::iterator"""
        return _model.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        r"""end(IntVector self) -> std::vector< int >::iterator"""
        return _model.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        r"""rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _model.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        r"""rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _model.IntVector_rend(self)

    def clear(self) -> "void":
        r"""clear(IntVector self)"""
        return _model.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        r"""get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _model.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(IntVector self)"""
        return _model.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        r"""
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _model.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector

        Parameters
        ----------
        other: std::vector< int > const &

        __init__(IntVector self, std::vector< int >::size_type size) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(IntVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        _model.IntVector_swiginit(self, _model.new_IntVector(*args))

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        r"""
        push_back(IntVector self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        r"""front(IntVector self) -> std::vector< int >::value_type const &"""
        return _model.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        r"""back(IntVector self) -> std::vector< int >::value_type const &"""
        return _model.IntVector_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        r"""
        assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(IntVector self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _model.IntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        r"""
        reserve(IntVector self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _model.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        r"""capacity(IntVector self) -> std::vector< int >::size_type"""
        return _model.IntVector_capacity(self)

    def __array__(self):
        """Enable access to this data as a numpy array, via np.asarray(v) """
        type_name = "int"
        s = len(self)
        if type_name == "float":
            a = np.ndarray(shape=(s,), dtype=np.float32)
        elif type_name == "double":
            a = np.ndarray(shape=(s,), dtype=np.float64)
        elif type_name == "int":
            a = np.ndarray(shape=(s,), dtype=np.int32)
        elif type_name == "int64" or type_name == "int64_t":
            a = np.ndarray(shape=(s,), dtype=np.int64)
        elif type_name == "bool":
            a = np.ndarray(shape=(s,), dtype=np.bool)
        else:
            raise Exception("Expecting float or double type")
        copy_to_buffer_int(self, a)
        return a

    def copy_from(self, a):
        """Enable buffer copy from given numpy array or vector """
        if isinstance(a, FloatVector):
            copy_from_vector_float_to_int(self, a)
        elif isinstance(a, DoubleVector):
            copy_from_vector_double_to_int(self, a)
        elif isinstance(a, IntVector):
            copy_from_vector_int_to_int(self, a)
        elif isinstance(a, Int64Vector):
            copy_from_vector_int64_to_int(self, a)
        elif isinstance(a, Int8Vector):
            copy_from_vector_int8_to_int(self, a)
        else:
            copy_from_buffer_int(self, a)

    __swig_destroy__ = _model.delete_IntVector

# Register IntVector in _model:
_model.IntVector_swigregister(IntVector)

class Int64Vector(object):
    r"""Proxy of C++ std::vector< int64_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(Int64Vector self) -> SwigPyIterator"""
        return _model.Int64Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Int64Vector self) -> bool"""
        return _model.Int64Vector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(Int64Vector self) -> bool"""
        return _model.Int64Vector___bool__(self)

    def __len__(self) -> "std::vector< long >::size_type":
        r"""__len__(Int64Vector self) -> std::vector< long >::size_type"""
        return _model.Int64Vector___len__(self)

    def __getslice__(self, i: 'std::vector< long >::difference_type', j: 'std::vector< long >::difference_type') -> "std::vector< long,std::allocator< long > > *":
        r"""
        __getslice__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j) -> Int64Vector

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        """
        return _model.Int64Vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        __setslice__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j, Int64Vector v)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type
        v: std::vector< long,std::allocator< long > > const &

        """
        return _model.Int64Vector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< long >::difference_type', j: 'std::vector< long >::difference_type') -> "void":
        r"""
        __delslice__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        """
        return _model.Int64Vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(Int64Vector self, std::vector< long >::difference_type i)

        Parameters
        ----------
        i: std::vector< long >::difference_type

        __delitem__(Int64Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.Int64Vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< long >::value_type const &":
        r"""
        __getitem__(Int64Vector self, PySliceObject * slice) -> Int64Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Int64Vector self, std::vector< long >::difference_type i) -> std::vector< long >::value_type const &

        Parameters
        ----------
        i: std::vector< long >::difference_type

        """
        return _model.Int64Vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(Int64Vector self, PySliceObject * slice, Int64Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< long,std::allocator< long > > const &

        __setitem__(Int64Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Int64Vector self, std::vector< long >::difference_type i, std::vector< long >::value_type const & x)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        x: std::vector< long >::value_type const &

        """
        return _model.Int64Vector___setitem__(self, *args)

    def pop(self) -> "std::vector< long >::value_type":
        r"""pop(Int64Vector self) -> std::vector< long >::value_type"""
        return _model.Int64Vector_pop(self)

    def append(self, x: 'std::vector< long >::value_type const &') -> "void":
        r"""
        append(Int64Vector self, std::vector< long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long >::value_type const &

        """
        return _model.Int64Vector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(Int64Vector self) -> bool"""
        return _model.Int64Vector_empty(self)

    def size(self) -> "std::vector< long >::size_type":
        r"""size(Int64Vector self) -> std::vector< long >::size_type"""
        return _model.Int64Vector_size(self)

    def swap(self, v: 'Int64Vector') -> "void":
        r"""
        swap(Int64Vector self, Int64Vector v)

        Parameters
        ----------
        v: std::vector< int64_t > &

        """
        return _model.Int64Vector_swap(self, v)

    def begin(self) -> "std::vector< long >::iterator":
        r"""begin(Int64Vector self) -> std::vector< long >::iterator"""
        return _model.Int64Vector_begin(self)

    def end(self) -> "std::vector< long >::iterator":
        r"""end(Int64Vector self) -> std::vector< long >::iterator"""
        return _model.Int64Vector_end(self)

    def rbegin(self) -> "std::vector< long >::reverse_iterator":
        r"""rbegin(Int64Vector self) -> std::vector< long >::reverse_iterator"""
        return _model.Int64Vector_rbegin(self)

    def rend(self) -> "std::vector< long >::reverse_iterator":
        r"""rend(Int64Vector self) -> std::vector< long >::reverse_iterator"""
        return _model.Int64Vector_rend(self)

    def clear(self) -> "void":
        r"""clear(Int64Vector self)"""
        return _model.Int64Vector_clear(self)

    def get_allocator(self) -> "std::vector< long >::allocator_type":
        r"""get_allocator(Int64Vector self) -> std::vector< long >::allocator_type"""
        return _model.Int64Vector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(Int64Vector self)"""
        return _model.Int64Vector_pop_back(self)

    def erase(self, *args) -> "std::vector< long >::iterator":
        r"""
        erase(Int64Vector self, std::vector< long >::iterator pos) -> std::vector< long >::iterator

        Parameters
        ----------
        pos: std::vector< long >::iterator

        erase(Int64Vector self, std::vector< long >::iterator first, std::vector< long >::iterator last) -> std::vector< long >::iterator

        Parameters
        ----------
        first: std::vector< long >::iterator
        last: std::vector< long >::iterator

        """
        return _model.Int64Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Int64Vector self) -> Int64Vector
        __init__(Int64Vector self, Int64Vector other) -> Int64Vector

        Parameters
        ----------
        other: std::vector< int64_t > const &

        __init__(Int64Vector self, std::vector< long >::size_type size) -> Int64Vector

        Parameters
        ----------
        size: std::vector< long >::size_type

        __init__(Int64Vector self, std::vector< long >::size_type size, std::vector< long >::value_type const & value) -> Int64Vector

        Parameters
        ----------
        size: std::vector< long >::size_type
        value: std::vector< long >::value_type const &

        """
        _model.Int64Vector_swiginit(self, _model.new_Int64Vector(*args))

    def push_back(self, x: 'std::vector< long >::value_type const &') -> "void":
        r"""
        push_back(Int64Vector self, std::vector< long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long >::value_type const &

        """
        return _model.Int64Vector_push_back(self, x)

    def front(self) -> "std::vector< long >::value_type const &":
        r"""front(Int64Vector self) -> std::vector< long >::value_type const &"""
        return _model.Int64Vector_front(self)

    def back(self) -> "std::vector< long >::value_type const &":
        r"""back(Int64Vector self) -> std::vector< long >::value_type const &"""
        return _model.Int64Vector_back(self)

    def assign(self, n: 'std::vector< long >::size_type', x: 'std::vector< long >::value_type const &') -> "void":
        r"""
        assign(Int64Vector self, std::vector< long >::size_type n, std::vector< long >::value_type const & x)

        Parameters
        ----------
        n: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _model.Int64Vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(Int64Vector self, std::vector< long >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< long >::size_type

        resize(Int64Vector self, std::vector< long >::size_type new_size, std::vector< long >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _model.Int64Vector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(Int64Vector self, std::vector< long >::iterator pos, std::vector< long >::value_type const & x) -> std::vector< long >::iterator

        Parameters
        ----------
        pos: std::vector< long >::iterator
        x: std::vector< long >::value_type const &

        insert(Int64Vector self, std::vector< long >::iterator pos, std::vector< long >::size_type n, std::vector< long >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< long >::iterator
        n: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _model.Int64Vector_insert(self, *args)

    def reserve(self, n: 'std::vector< long >::size_type') -> "void":
        r"""
        reserve(Int64Vector self, std::vector< long >::size_type n)

        Parameters
        ----------
        n: std::vector< long >::size_type

        """
        return _model.Int64Vector_reserve(self, n)

    def capacity(self) -> "std::vector< long >::size_type":
        r"""capacity(Int64Vector self) -> std::vector< long >::size_type"""
        return _model.Int64Vector_capacity(self)

    def __array__(self):
        """Enable access to this data as a numpy array, via np.asarray(v) """
        type_name = "int64_t"
        s = len(self)
        if type_name == "float":
            a = np.ndarray(shape=(s,), dtype=np.float32)
        elif type_name == "double":
            a = np.ndarray(shape=(s,), dtype=np.float64)
        elif type_name == "int":
            a = np.ndarray(shape=(s,), dtype=np.int32)
        elif type_name == "int64" or type_name == "int64_t":
            a = np.ndarray(shape=(s,), dtype=np.int64)
        elif type_name == "bool":
            a = np.ndarray(shape=(s,), dtype=np.bool)
        else:
            raise Exception("Expecting float or double type")
        copy_to_buffer_int64_t(self, a)
        return a

    def copy_from(self, a):
        """Enable buffer copy from given numpy array or vector """
        if isinstance(a, FloatVector):
            copy_from_vector_float_to_int64_t(self, a)
        elif isinstance(a, DoubleVector):
            copy_from_vector_double_to_int64_t(self, a)
        elif isinstance(a, IntVector):
            copy_from_vector_int_to_int64_t(self, a)
        elif isinstance(a, Int64Vector):
            copy_from_vector_int64_to_int64_t(self, a)
        elif isinstance(a, Int8Vector):
            copy_from_vector_int8_to_int64_t(self, a)
        else:
            copy_from_buffer_int64_t(self, a)

    __swig_destroy__ = _model.delete_Int64Vector

# Register Int64Vector in _model:
_model.Int64Vector_swigregister(Int64Vector)

class Int8Vector(object):
    r"""Proxy of C++ std::vector< int8_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(Int8Vector self) -> SwigPyIterator"""
        return _model.Int8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(Int8Vector self) -> bool"""
        return _model.Int8Vector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(Int8Vector self) -> bool"""
        return _model.Int8Vector___bool__(self)

    def __len__(self) -> "std::vector< signed char >::size_type":
        r"""__len__(Int8Vector self) -> std::vector< signed char >::size_type"""
        return _model.Int8Vector___len__(self)

    def __getslice__(self, i: 'std::vector< signed char >::difference_type', j: 'std::vector< signed char >::difference_type') -> "std::vector< signed char,std::allocator< signed char > > *":
        r"""
        __getslice__(Int8Vector self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j) -> Int8Vector

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        j: std::vector< signed char >::difference_type

        """
        return _model.Int8Vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(Int8Vector self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        j: std::vector< signed char >::difference_type

        __setslice__(Int8Vector self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j, Int8Vector v)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        j: std::vector< signed char >::difference_type
        v: std::vector< signed char,std::allocator< signed char > > const &

        """
        return _model.Int8Vector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< signed char >::difference_type', j: 'std::vector< signed char >::difference_type') -> "void":
        r"""
        __delslice__(Int8Vector self, std::vector< signed char >::difference_type i, std::vector< signed char >::difference_type j)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        j: std::vector< signed char >::difference_type

        """
        return _model.Int8Vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(Int8Vector self, std::vector< signed char >::difference_type i)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type

        __delitem__(Int8Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _model.Int8Vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< signed char >::value_type const &":
        r"""
        __getitem__(Int8Vector self, PySliceObject * slice) -> Int8Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Int8Vector self, std::vector< signed char >::difference_type i) -> std::vector< signed char >::value_type const &

        Parameters
        ----------
        i: std::vector< signed char >::difference_type

        """
        return _model.Int8Vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(Int8Vector self, PySliceObject * slice, Int8Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< signed char,std::allocator< signed char > > const &

        __setitem__(Int8Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Int8Vector self, std::vector< signed char >::difference_type i, std::vector< signed char >::value_type const & x)

        Parameters
        ----------
        i: std::vector< signed char >::difference_type
        x: std::vector< signed char >::value_type const &

        """
        return _model.Int8Vector___setitem__(self, *args)

    def pop(self) -> "std::vector< signed char >::value_type":
        r"""pop(Int8Vector self) -> std::vector< signed char >::value_type"""
        return _model.Int8Vector_pop(self)

    def append(self, x: 'std::vector< signed char >::value_type const &') -> "void":
        r"""
        append(Int8Vector self, std::vector< signed char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< signed char >::value_type const &

        """
        return _model.Int8Vector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(Int8Vector self) -> bool"""
        return _model.Int8Vector_empty(self)

    def size(self) -> "std::vector< signed char >::size_type":
        r"""size(Int8Vector self) -> std::vector< signed char >::size_type"""
        return _model.Int8Vector_size(self)

    def swap(self, v: 'Int8Vector') -> "void":
        r"""
        swap(Int8Vector self, Int8Vector v)

        Parameters
        ----------
        v: std::vector< int8_t > &

        """
        return _model.Int8Vector_swap(self, v)

    def begin(self) -> "std::vector< signed char >::iterator":
        r"""begin(Int8Vector self) -> std::vector< signed char >::iterator"""
        return _model.Int8Vector_begin(self)

    def end(self) -> "std::vector< signed char >::iterator":
        r"""end(Int8Vector self) -> std::vector< signed char >::iterator"""
        return _model.Int8Vector_end(self)

    def rbegin(self) -> "std::vector< signed char >::reverse_iterator":
        r"""rbegin(Int8Vector self) -> std::vector< signed char >::reverse_iterator"""
        return _model.Int8Vector_rbegin(self)

    def rend(self) -> "std::vector< signed char >::reverse_iterator":
        r"""rend(Int8Vector self) -> std::vector< signed char >::reverse_iterator"""
        return _model.Int8Vector_rend(self)

    def clear(self) -> "void":
        r"""clear(Int8Vector self)"""
        return _model.Int8Vector_clear(self)

    def get_allocator(self) -> "std::vector< signed char >::allocator_type":
        r"""get_allocator(Int8Vector self) -> std::vector< signed char >::allocator_type"""
        return _model.Int8Vector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(Int8Vector self)"""
        return _model.Int8Vector_pop_back(self)

    def erase(self, *args) -> "std::vector< signed char >::iterator":
        r"""
        erase(Int8Vector self, std::vector< signed char >::iterator pos) -> std::vector< signed char >::iterator

        Parameters
        ----------
        pos: std::vector< signed char >::iterator

        erase(Int8Vector self, std::vector< signed char >::iterator first, std::vector< signed char >::iterator last) -> std::vector< signed char >::iterator

        Parameters
        ----------
        first: std::vector< signed char >::iterator
        last: std::vector< signed char >::iterator

        """
        return _model.Int8Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Int8Vector self) -> Int8Vector
        __init__(Int8Vector self, Int8Vector other) -> Int8Vector

        Parameters
        ----------
        other: std::vector< int8_t > const &

        __init__(Int8Vector self, std::vector< signed char >::size_type size) -> Int8Vector

        Parameters
        ----------
        size: std::vector< signed char >::size_type

        __init__(Int8Vector self, std::vector< signed char >::size_type size, std::vector< signed char >::value_type const & value) -> Int8Vector

        Parameters
        ----------
        size: std::vector< signed char >::size_type
        value: std::vector< signed char >::value_type const &

        """
        _model.Int8Vector_swiginit(self, _model.new_Int8Vector(*args))

    def push_back(self, x: 'std::vector< signed char >::value_type const &') -> "void":
        r"""
        push_back(Int8Vector self, std::vector< signed char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< signed char >::value_type const &

        """
        return _model.Int8Vector_push_back(self, x)

    def front(self) -> "std::vector< signed char >::value_type const &":
        r"""front(Int8Vector self) -> std::vector< signed char >::value_type const &"""
        return _model.Int8Vector_front(self)

    def back(self) -> "std::vector< signed char >::value_type const &":
        r"""back(Int8Vector self) -> std::vector< signed char >::value_type const &"""
        return _model.Int8Vector_back(self)

    def assign(self, n: 'std::vector< signed char >::size_type', x: 'std::vector< signed char >::value_type const &') -> "void":
        r"""
        assign(Int8Vector self, std::vector< signed char >::size_type n, std::vector< signed char >::value_type const & x)

        Parameters
        ----------
        n: std::vector< signed char >::size_type
        x: std::vector< signed char >::value_type const &

        """
        return _model.Int8Vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(Int8Vector self, std::vector< signed char >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< signed char >::size_type

        resize(Int8Vector self, std::vector< signed char >::size_type new_size, std::vector< signed char >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< signed char >::size_type
        x: std::vector< signed char >::value_type const &

        """
        return _model.Int8Vector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(Int8Vector self, std::vector< signed char >::iterator pos, std::vector< signed char >::value_type const & x) -> std::vector< signed char >::iterator

        Parameters
        ----------
        pos: std::vector< signed char >::iterator
        x: std::vector< signed char >::value_type const &

        insert(Int8Vector self, std::vector< signed char >::iterator pos, std::vector< signed char >::size_type n, std::vector< signed char >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< signed char >::iterator
        n: std::vector< signed char >::size_type
        x: std::vector< signed char >::value_type const &

        """
        return _model.Int8Vector_insert(self, *args)

    def reserve(self, n: 'std::vector< signed char >::size_type') -> "void":
        r"""
        reserve(Int8Vector self, std::vector< signed char >::size_type n)

        Parameters
        ----------
        n: std::vector< signed char >::size_type

        """
        return _model.Int8Vector_reserve(self, n)

    def capacity(self) -> "std::vector< signed char >::size_type":
        r"""capacity(Int8Vector self) -> std::vector< signed char >::size_type"""
        return _model.Int8Vector_capacity(self)

    def __array__(self):
        """Enable access to this data as a numpy array, via np.asarray(v) """
        type_name = "int8_t"
        s = len(self)
        if type_name == "float":
            a = np.ndarray(shape=(s,), dtype=np.float32)
        elif type_name == "double":
            a = np.ndarray(shape=(s,), dtype=np.float64)
        elif type_name == "int":
            a = np.ndarray(shape=(s,), dtype=np.int32)
        elif type_name == "int64" or type_name == "int64_t":
            a = np.ndarray(shape=(s,), dtype=np.int64)
        elif type_name == "bool":
            a = np.ndarray(shape=(s,), dtype=np.bool)
        else:
            raise Exception("Expecting float or double type")
        copy_to_buffer_int8_t(self, a)
        return a

    def copy_from(self, a):
        """Enable buffer copy from given numpy array or vector """
        if isinstance(a, FloatVector):
            copy_from_vector_float_to_int8_t(self, a)
        elif isinstance(a, DoubleVector):
            copy_from_vector_double_to_int8_t(self, a)
        elif isinstance(a, IntVector):
            copy_from_vector_int_to_int8_t(self, a)
        elif isinstance(a, Int64Vector):
            copy_from_vector_int64_to_int8_t(self, a)
        elif isinstance(a, Int8Vector):
            copy_from_vector_int8_to_int8_t(self, a)
        else:
            copy_from_buffer_int8_t(self, a)

    __swig_destroy__ = _model.delete_Int8Vector

# Register Int8Vector in _model:
_model.Int8Vector_swigregister(Int8Vector)


class FloatVector(FloatVector):
    def __init__(self, numpyArray = None):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
#since this is a vector, we can always ravel it.
            super(FloatVector, self).__init__()
            self.copy_from(numpyArray.ravel().astype(np.float32))
        elif numpyArray:
#fallback to non-numpy construction
            super(FloatVector, self).__init__(numpyArray)
        else:
            super(FloatVector, self).__init__()



class DoubleVector(DoubleVector):
    def __init__(self, numpyArray = None):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
#since this is a vector, we can always ravel it.
            super(DoubleVector, self).__init__()
            self.copy_from(numpyArray.ravel().astype(np.float))
        elif numpyArray:
#fallback to non-numpy construction
            super(DoubleVector, self).__init__(numpyArray)
        else:
            super(DoubleVector, self).__init__()



class IntVector(IntVector):
    def __init__(self, numpyArray = None):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
#since this is a vector, we can always ravel it.
            super(IntVector, self).__init__()
            self.copy_from(numpyArray.ravel().astype(np.int32))
        elif numpyArray:
#fallback to non-numpy construction
            super(IntVector, self).__init__(numpyArray)
        else:
            super(IntVector, self).__init__()



class Int64Vector(Int64Vector):
    def __init__(self, numpyArray = None):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
#since this is a vector, we can always ravel it.
            super(Int64Vector, self).__init__()
            self.copy_from(numpyArray.ravel().astype(np.int64))
        elif numpyArray:
#fallback to non-numpy construction
            super(Int64Vector, self).__init__(numpyArray)
        else:
            super(Int64Vector, self).__init__()



class Int8Vector(Int8Vector):
    def __init__(self, numpyArray = None):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
#since this is a vector, we can always ravel it.
            super(Int8Vector, self).__init__()
            self.copy_from(numpyArray.ravel().astype(np.int8))
        elif numpyArray:
#fallback to non-numpy construction
            super(Int8Vector, self).__init__(numpyArray)
        else:
            super(Int8Vector, self).__init__()



def copy_to_buffer_double(field: 'DoubleVector', buffer: 'double *') -> "void":
    r"""
    copy_to_buffer_double(DoubleVector field, double * buffer)

    Parameters
    ----------
    field: std::vector< double,std::allocator< double > > const &
    buffer: double *

    """
    return _model.copy_to_buffer_double(field, buffer)

def copy_from_buffer_double(field: 'DoubleVector', buffer: 'double *') -> "void":
    r"""
    copy_from_buffer_double(DoubleVector field, double * buffer)

    Parameters
    ----------
    field: std::vector< double,std::allocator< double > > &
    buffer: double *

    """
    return _model.copy_from_buffer_double(field, buffer)

def copy_from_vector_float_to_double(target: 'DoubleVector', source: 'FloatVector') -> "void":
    r"""
    copy_from_vector_float_to_double(DoubleVector target, FloatVector source)

    Parameters
    ----------
    target: std::vector< double,std::allocator< double > > &
    source: std::vector< float,std::allocator< float > > &

    """
    return _model.copy_from_vector_float_to_double(target, source)

def copy_from_vector_double_to_double(target: 'DoubleVector', source: 'DoubleVector') -> "void":
    r"""
    copy_from_vector_double_to_double(DoubleVector target, DoubleVector source)

    Parameters
    ----------
    target: std::vector< double,std::allocator< double > > &
    source: std::vector< double,std::allocator< double > > &

    """
    return _model.copy_from_vector_double_to_double(target, source)

def copy_from_vector_int_to_double(target: 'DoubleVector', source: 'IntVector') -> "void":
    r"""
    copy_from_vector_int_to_double(DoubleVector target, IntVector source)

    Parameters
    ----------
    target: std::vector< double,std::allocator< double > > &
    source: std::vector< int,std::allocator< int > > &

    """
    return _model.copy_from_vector_int_to_double(target, source)

def copy_from_vector_int64_to_double(target: 'DoubleVector', source: 'Int64Vector') -> "void":
    r"""
    copy_from_vector_int64_to_double(DoubleVector target, Int64Vector source)

    Parameters
    ----------
    target: std::vector< double,std::allocator< double > > &
    source: std::vector< int64_t,std::allocator< int64_t > > &

    """
    return _model.copy_from_vector_int64_to_double(target, source)

def copy_from_vector_int8_to_double(target: 'DoubleVector', source: 'Int8Vector') -> "void":
    r"""
    copy_from_vector_int8_to_double(DoubleVector target, Int8Vector source)

    Parameters
    ----------
    target: std::vector< double,std::allocator< double > > &
    source: std::vector< int8_t,std::allocator< int8_t > > &

    """
    return _model.copy_from_vector_int8_to_double(target, source)

def copy_to_buffer_float(field: 'FloatVector', buffer: 'float *') -> "void":
    r"""
    copy_to_buffer_float(FloatVector field, float * buffer)

    Parameters
    ----------
    field: std::vector< float,std::allocator< float > > const &
    buffer: float *

    """
    return _model.copy_to_buffer_float(field, buffer)

def copy_from_buffer_float(field: 'FloatVector', buffer: 'float *') -> "void":
    r"""
    copy_from_buffer_float(FloatVector field, float * buffer)

    Parameters
    ----------
    field: std::vector< float,std::allocator< float > > &
    buffer: float *

    """
    return _model.copy_from_buffer_float(field, buffer)

def copy_from_vector_float_to_float(target: 'FloatVector', source: 'FloatVector') -> "void":
    r"""
    copy_from_vector_float_to_float(FloatVector target, FloatVector source)

    Parameters
    ----------
    target: std::vector< float,std::allocator< float > > &
    source: std::vector< float,std::allocator< float > > &

    """
    return _model.copy_from_vector_float_to_float(target, source)

def copy_from_vector_double_to_float(target: 'FloatVector', source: 'DoubleVector') -> "void":
    r"""
    copy_from_vector_double_to_float(FloatVector target, DoubleVector source)

    Parameters
    ----------
    target: std::vector< float,std::allocator< float > > &
    source: std::vector< double,std::allocator< double > > &

    """
    return _model.copy_from_vector_double_to_float(target, source)

def copy_from_vector_int_to_float(target: 'FloatVector', source: 'IntVector') -> "void":
    r"""
    copy_from_vector_int_to_float(FloatVector target, IntVector source)

    Parameters
    ----------
    target: std::vector< float,std::allocator< float > > &
    source: std::vector< int,std::allocator< int > > &

    """
    return _model.copy_from_vector_int_to_float(target, source)

def copy_from_vector_int64_to_float(target: 'FloatVector', source: 'Int64Vector') -> "void":
    r"""
    copy_from_vector_int64_to_float(FloatVector target, Int64Vector source)

    Parameters
    ----------
    target: std::vector< float,std::allocator< float > > &
    source: std::vector< int64_t,std::allocator< int64_t > > &

    """
    return _model.copy_from_vector_int64_to_float(target, source)

def copy_from_vector_int8_to_float(target: 'FloatVector', source: 'Int8Vector') -> "void":
    r"""
    copy_from_vector_int8_to_float(FloatVector target, Int8Vector source)

    Parameters
    ----------
    target: std::vector< float,std::allocator< float > > &
    source: std::vector< int8_t,std::allocator< int8_t > > &

    """
    return _model.copy_from_vector_int8_to_float(target, source)

def copy_to_buffer_int(field: 'IntVector', buffer: 'int *') -> "void":
    r"""
    copy_to_buffer_int(IntVector field, int * buffer)

    Parameters
    ----------
    field: std::vector< int,std::allocator< int > > const &
    buffer: int *

    """
    return _model.copy_to_buffer_int(field, buffer)

def copy_from_buffer_int(field: 'IntVector', buffer: 'int *') -> "void":
    r"""
    copy_from_buffer_int(IntVector field, int * buffer)

    Parameters
    ----------
    field: std::vector< int,std::allocator< int > > &
    buffer: int *

    """
    return _model.copy_from_buffer_int(field, buffer)

def copy_from_vector_float_to_int(target: 'IntVector', source: 'FloatVector') -> "void":
    r"""
    copy_from_vector_float_to_int(IntVector target, FloatVector source)

    Parameters
    ----------
    target: std::vector< int,std::allocator< int > > &
    source: std::vector< float,std::allocator< float > > &

    """
    return _model.copy_from_vector_float_to_int(target, source)

def copy_from_vector_double_to_int(target: 'IntVector', source: 'DoubleVector') -> "void":
    r"""
    copy_from_vector_double_to_int(IntVector target, DoubleVector source)

    Parameters
    ----------
    target: std::vector< int,std::allocator< int > > &
    source: std::vector< double,std::allocator< double > > &

    """
    return _model.copy_from_vector_double_to_int(target, source)

def copy_from_vector_int_to_int(target: 'IntVector', source: 'IntVector') -> "void":
    r"""
    copy_from_vector_int_to_int(IntVector target, IntVector source)

    Parameters
    ----------
    target: std::vector< int,std::allocator< int > > &
    source: std::vector< int,std::allocator< int > > &

    """
    return _model.copy_from_vector_int_to_int(target, source)

def copy_from_vector_int64_to_int(target: 'IntVector', source: 'Int64Vector') -> "void":
    r"""
    copy_from_vector_int64_to_int(IntVector target, Int64Vector source)

    Parameters
    ----------
    target: std::vector< int,std::allocator< int > > &
    source: std::vector< int64_t,std::allocator< int64_t > > &

    """
    return _model.copy_from_vector_int64_to_int(target, source)

def copy_from_vector_int8_to_int(target: 'IntVector', source: 'Int8Vector') -> "void":
    r"""
    copy_from_vector_int8_to_int(IntVector target, Int8Vector source)

    Parameters
    ----------
    target: std::vector< int,std::allocator< int > > &
    source: std::vector< int8_t,std::allocator< int8_t > > &

    """
    return _model.copy_from_vector_int8_to_int(target, source)

def copy_to_buffer_int64_t(field: 'Int64Vector', buffer: 'int64_t *') -> "void":
    r"""
    copy_to_buffer_int64_t(Int64Vector field, int64_t * buffer)

    Parameters
    ----------
    field: std::vector< int64_t,std::allocator< int64_t > > const &
    buffer: int64_t *

    """
    return _model.copy_to_buffer_int64_t(field, buffer)

def copy_from_buffer_int64_t(field: 'Int64Vector', buffer: 'int64_t *') -> "void":
    r"""
    copy_from_buffer_int64_t(Int64Vector field, int64_t * buffer)

    Parameters
    ----------
    field: std::vector< int64_t,std::allocator< int64_t > > &
    buffer: int64_t *

    """
    return _model.copy_from_buffer_int64_t(field, buffer)

def copy_from_vector_float_to_int64_t(target: 'Int64Vector', source: 'FloatVector') -> "void":
    r"""
    copy_from_vector_float_to_int64_t(Int64Vector target, FloatVector source)

    Parameters
    ----------
    target: std::vector< int64_t,std::allocator< int64_t > > &
    source: std::vector< float,std::allocator< float > > &

    """
    return _model.copy_from_vector_float_to_int64_t(target, source)

def copy_from_vector_double_to_int64_t(target: 'Int64Vector', source: 'DoubleVector') -> "void":
    r"""
    copy_from_vector_double_to_int64_t(Int64Vector target, DoubleVector source)

    Parameters
    ----------
    target: std::vector< int64_t,std::allocator< int64_t > > &
    source: std::vector< double,std::allocator< double > > &

    """
    return _model.copy_from_vector_double_to_int64_t(target, source)

def copy_from_vector_int_to_int64_t(target: 'Int64Vector', source: 'IntVector') -> "void":
    r"""
    copy_from_vector_int_to_int64_t(Int64Vector target, IntVector source)

    Parameters
    ----------
    target: std::vector< int64_t,std::allocator< int64_t > > &
    source: std::vector< int,std::allocator< int > > &

    """
    return _model.copy_from_vector_int_to_int64_t(target, source)

def copy_from_vector_int64_to_int64_t(target: 'Int64Vector', source: 'Int64Vector') -> "void":
    r"""
    copy_from_vector_int64_to_int64_t(Int64Vector target, Int64Vector source)

    Parameters
    ----------
    target: std::vector< int64_t,std::allocator< int64_t > > &
    source: std::vector< int64_t,std::allocator< int64_t > > &

    """
    return _model.copy_from_vector_int64_to_int64_t(target, source)

def copy_from_vector_int8_to_int64_t(target: 'Int64Vector', source: 'Int8Vector') -> "void":
    r"""
    copy_from_vector_int8_to_int64_t(Int64Vector target, Int8Vector source)

    Parameters
    ----------
    target: std::vector< int64_t,std::allocator< int64_t > > &
    source: std::vector< int8_t,std::allocator< int8_t > > &

    """
    return _model.copy_from_vector_int8_to_int64_t(target, source)

def copy_to_buffer_int8_t(field: 'Int8Vector', buffer: 'int8_t *') -> "void":
    r"""
    copy_to_buffer_int8_t(Int8Vector field, int8_t * buffer)

    Parameters
    ----------
    field: std::vector< int8_t,std::allocator< int8_t > > const &
    buffer: int8_t *

    """
    return _model.copy_to_buffer_int8_t(field, buffer)

def copy_from_buffer_int8_t(field: 'Int8Vector', buffer: 'int8_t *') -> "void":
    r"""
    copy_from_buffer_int8_t(Int8Vector field, int8_t * buffer)

    Parameters
    ----------
    field: std::vector< int8_t,std::allocator< int8_t > > &
    buffer: int8_t *

    """
    return _model.copy_from_buffer_int8_t(field, buffer)

def copy_from_vector_float_to_int8_t(target: 'Int8Vector', source: 'FloatVector') -> "void":
    r"""
    copy_from_vector_float_to_int8_t(Int8Vector target, FloatVector source)

    Parameters
    ----------
    target: std::vector< int8_t,std::allocator< int8_t > > &
    source: std::vector< float,std::allocator< float > > &

    """
    return _model.copy_from_vector_float_to_int8_t(target, source)

def copy_from_vector_double_to_int8_t(target: 'Int8Vector', source: 'DoubleVector') -> "void":
    r"""
    copy_from_vector_double_to_int8_t(Int8Vector target, DoubleVector source)

    Parameters
    ----------
    target: std::vector< int8_t,std::allocator< int8_t > > &
    source: std::vector< double,std::allocator< double > > &

    """
    return _model.copy_from_vector_double_to_int8_t(target, source)

def copy_from_vector_int_to_int8_t(target: 'Int8Vector', source: 'IntVector') -> "void":
    r"""
    copy_from_vector_int_to_int8_t(Int8Vector target, IntVector source)

    Parameters
    ----------
    target: std::vector< int8_t,std::allocator< int8_t > > &
    source: std::vector< int,std::allocator< int > > &

    """
    return _model.copy_from_vector_int_to_int8_t(target, source)

def copy_from_vector_int64_to_int8_t(target: 'Int8Vector', source: 'Int64Vector') -> "void":
    r"""
    copy_from_vector_int64_to_int8_t(Int8Vector target, Int64Vector source)

    Parameters
    ----------
    target: std::vector< int8_t,std::allocator< int8_t > > &
    source: std::vector< int64_t,std::allocator< int64_t > > &

    """
    return _model.copy_from_vector_int64_to_int8_t(target, source)

def copy_from_vector_int8_to_int8_t(target: 'Int8Vector', source: 'Int8Vector') -> "void":
    r"""
    copy_from_vector_int8_to_int8_t(Int8Vector target, Int8Vector source)

    Parameters
    ----------
    target: std::vector< int8_t,std::allocator< int8_t > > &
    source: std::vector< int8_t,std::allocator< int8_t > > &

    """
    return _model.copy_from_vector_int8_to_int8_t(target, source)



_model_wrapper = None

def predict(inputData: 'numpy.ndarray') -> "numpy.ndarray":
    """Convenience function for calling the model directly without callbacks"""
    global _model_wrapper
    if _model_wrapper is None:
        _model_wrapper = ModelWrapper()

    if _model_wrapper.IsSteppable():
        raise Exception("You need to use the ModelWrapper directly because this model is steppable, which means the input is provided by a callback method")

    inputVector = FloatVector(inputData)
    output = _model_wrapper.Predict(inputVector)
    return np.array(output)

def reset():
    model_Reset()



class TensorShape(object):
    r"""Proxy of C++ TensorShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    rows = property(_model.TensorShape_rows_get, _model.TensorShape_rows_set, doc=r"""rows : int32_t""")
    columns = property(_model.TensorShape_columns_get, _model.TensorShape_columns_set, doc=r"""columns : int32_t""")
    channels = property(_model.TensorShape_channels_get, _model.TensorShape_channels_set, doc=r"""channels : int32_t""")

    def __init__(self):
        r"""__init__(TensorShape self) -> TensorShape"""
        _model.TensorShape_swiginit(self, _model.new_TensorShape())
    __swig_destroy__ = _model.delete_TensorShape

# Register TensorShape in _model:
_model.TensorShape_swigregister(TensorShape)


def model_Predict(context: 'void *', input: 'float *', output: 'float *') -> "void":
    r"""
    model_Predict(void * context, float * input, float * output)

    Parameters
    ----------
    context: void *
    input: float *
    output: float *

    """
    return _model.model_Predict(context, input, output)

def model_Reset() -> "void":
    r"""model_Reset()"""
    return _model.model_Reset()

def model_GetInputSize(index: 'int32_t') -> "int32_t":
    r"""
    model_GetInputSize(int32_t index) -> int32_t

    Parameters
    ----------
    index: int32_t

    """
    return _model.model_GetInputSize(index)

def model_GetOutputSize(index: 'int32_t') -> "int32_t":
    r"""
    model_GetOutputSize(int32_t index) -> int32_t

    Parameters
    ----------
    index: int32_t

    """
    return _model.model_GetOutputSize(index)

def model_GetNumNodes() -> "int32_t":
    r"""model_GetNumNodes() -> int32_t"""
    return _model.model_GetNumNodes()

def model_GetInputShape(index: 'int32_t', shape: 'TensorShape') -> "void":
    r"""
    model_GetInputShape(int32_t index, TensorShape shape)

    Parameters
    ----------
    index: int32_t
    shape: TensorShape *

    """
    return _model.model_GetInputShape(index, shape)

def model_GetOutputShape(index: 'int32_t', shape: 'TensorShape') -> "void":
    r"""
    model_GetOutputShape(int32_t index, TensorShape shape)

    Parameters
    ----------
    index: int32_t
    shape: TensorShape *

    """
    return _model.model_GetOutputShape(index, shape)

def model_GetMetadata(key: 'char *') -> "char *":
    r"""
    model_GetMetadata(char * key) -> char *

    Parameters
    ----------
    key: char *

    """
    return _model.model_GetMetadata(key)
class HighResolutionTimer(object):
    r"""Proxy of C++ HighResolutionTimer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Reset(self) -> "void":
        r"""Reset(HighResolutionTimer self)"""
        return _model.HighResolutionTimer_Reset(self)

    def GetMilliseconds(self) -> "double":
        r"""GetMilliseconds(HighResolutionTimer self) -> double"""
        return _model.HighResolutionTimer_GetMilliseconds(self)

    def __init__(self):
        r"""__init__(HighResolutionTimer self) -> HighResolutionTimer"""
        _model.HighResolutionTimer_swiginit(self, _model.new_HighResolutionTimer())
    __swig_destroy__ = _model.delete_HighResolutionTimer

# Register HighResolutionTimer in _model:
_model.HighResolutionTimer_swigregister(HighResolutionTimer)

class ModelWrapper(object):
    r"""Proxy of C++ ModelWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(ModelWrapper self) -> ModelWrapper

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == ModelWrapper:
            _self = None
        else:
            _self = self
        _model.ModelWrapper_swiginit(self, _model.new_ModelWrapper(_self, ))
    __swig_destroy__ = _model.delete_ModelWrapper

    def GetInputShape(self, index: 'int'=0) -> "TensorShape":
        r"""
        GetInputShape(ModelWrapper self, int index=0) -> TensorShape

        Parameters
        ----------
        index: int

        """
        return _model.ModelWrapper_GetInputShape(self, index)

    def GetInputSize(self, index: 'int'=0) -> "int":
        r"""
        GetInputSize(ModelWrapper self, int index=0) -> int

        Parameters
        ----------
        index: int

        """
        return _model.ModelWrapper_GetInputSize(self, index)

    def GetOutputShape(self, index: 'int'=0) -> "TensorShape":
        r"""
        GetOutputShape(ModelWrapper self, int index=0) -> TensorShape

        Parameters
        ----------
        index: int

        """
        return _model.ModelWrapper_GetOutputShape(self, index)

    def GetOutputSize(self, index: 'int'=0) -> "int":
        r"""
        GetOutputSize(ModelWrapper self, int index=0) -> int

        Parameters
        ----------
        index: int

        """
        return _model.ModelWrapper_GetOutputSize(self, index)

    def Reset(self) -> "void":
        r"""Reset(ModelWrapper self)"""
        return _model.ModelWrapper_Reset(self)

    def IsSteppable(self) -> "bool":
        r"""IsSteppable(ModelWrapper self) -> bool"""
        return _model.ModelWrapper_IsSteppable(self)

    def GetMetadata(self, name: 'char const *') -> "char const *":
        r"""
        GetMetadata(ModelWrapper self, char const * name) -> char const *

        Parameters
        ----------
        name: char const *

        """
        return _model.ModelWrapper_GetMetadata(self, name)

    def Predict(self, input: 'FloatVector') -> "std::vector< float,std::allocator< float > > &":
        r"""
        Predict(ModelWrapper self, FloatVector input) -> FloatVector

        Parameters
        ----------
        input: std::vector< float,std::allocator< float > > &

        """
        return _model.ModelWrapper_Predict(self, input)
    def __disown__(self):
        self.this.disown()
        _model.disown_ModelWrapper(self)
        return weakref.proxy(self)

# Register ModelWrapper in _model:
_model.ModelWrapper_swigregister(ModelWrapper)


def get_default_input_shape() -> "TensorShape":
    r"""get_default_input_shape() -> TensorShape"""
    return _model.get_default_input_shape()

def get_default_output_shape() -> "TensorShape":
    r"""get_default_output_shape() -> TensorShape"""
    return _model.get_default_output_shape()


def TensorShape_Size(self):
    return self.rows * self.columns * self.channels

TensorShape.Size = TensorShape_Size




